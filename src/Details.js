import React, { Component, PropTypes } from 'react';
import { StyleSheet,Text, TextInput, View, Button, TouchableOpacity,Image,AppState} from 'react-native';
import DatePicker from 'react-native-datepicker';
import Main from './Main'
import moment from 'moment'
import PushNotification from 'react-native-push-notification'
import TimePicker from 'react-native-24h-timepicker';    
import firebase from "firebase";
import {Base64} from 'js-base64'
import AsyncStorage from '@react-native-community/async-storage'
import isDateTimePickerModal from 'react-native-modal-datetime-picker'
var todayDate =  new Date();

export default class Details extends React.Component{
  constructor(props) {
    super(props); 
    this.state = {
      isDateTimePickerVisible: false,
      dueDate:'',
      res:'',
      dueTime:'',
      storedData:[],
      currentTime:moment(new Date()).format("HH:mm"),
      currentDate:moment(new Date()).format("YYYY-MM-DD"),
      notState:false,
      auth_Token:'',
      description:'',
    };
    const { navigation } = this.props;  
    this.name = navigation.getParam('name'); 
    this.email=navigation.getParam('email');
    console.log("Constructor"+this.name)
  }
  static navigationOptions = {  
    title: 'Task',  
    headerStyle: {  
        backgroundColor: '#1EB8A7',  
    },
    headerTintColor:'#fff',
  };
  onChange = dueTime => this.setState({ dueTime })
  onCancel() {
    this.TimePicker.close();
  }
 
  getData = async () => {
    try {
      const value = await AsyncStorage.getItem('Auth_Token')
      if(value !== null) {
        this.setState({auth_Token:value})
        console.log("Async Value" , value)
      }
    } catch(e) {
      console.log(e)
    }
  }
  onConfirm(hour, minute) {
    this.setState({ dueTime: `${hour}:${minute}` });
    this.TimePicker.close();
  }
  componentDidMount(){ 
    this.getData();
    console.log(this.state.auth_token)
    console.log("Name :",this.name) 
    PushNotification.localNotificationSchedule({
      /* Android Only Properties */
      // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      date:new Date(Date.now())
      // /* iOS and Android properties */
      // title: "My Notification Title", // (optional)
      // message: "My Notification Message", // (required)
      // playSound: false, // (optional) default: true
      // soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
  });

  }
  // componentDidUpdate(){

  //   const { navigation } = this.props;   
  //   var mins = moment.utc(moment(this.state.currentTime, "HH:mm:ss").diff(moment(this.state.dueTime, "HH:mm:ss"))).format("mm") 
  //   if(this.state.currentDate===this.state.dueDate){ 
  //     PushNotification.localNotificationSchedule({
  //       message:"Time Up for "+this.name,
  //       date:new Date(Date.now()),
  //   })
  //   }
  //   console.log("Current Time : " , this.state.currentTime , mins)
  // }

  _saveTask(){
    firebase.database().ref('ToDo/Task/').child(this.state.auth_Token).child(this.name)
    .set({
      description:this.state.description,
      date:this.state.dueDate,
      time:this.state.dueTime,
    }).then((res)=>{
      console.log(res);
    }).catch((err)=>{
      console.log(err);
    })
  }
  
    render(){
        // const index = navigation.getParam('index');       
        // console.log("Detailed Name",name);
        // console.log("Detailes KeyValueD ", index);
        return(
        
            <View style={styles.container}>
            <View style={{textAlign:'center'}} >
        <Text style={{textAlign:'center',fontSize:25}} >{this.name}</Text>
            </View>
              <TextInput
                multiline={true}
                numberOfLines={10}
                onChangeText={(text)=>this.setState({description:text})}
                style={{ height:100,marginTop:10,
                textAlignVertical: 'top',
                backgroundColor:'#FFF',
                borderWidth:4,borderRadius:5,borderColor:"#BDD9D6"}}/>
        {/* <View style={{flexDirection:'row'}}> */}
             <DatePicker
                        style={{width: 200 , padding:18}}
                        date={this.state.dueDate}
                        mode="date"
                        placeholder="select date"
                        format="YYYY-MM-DD"
                        minDate={todayDate}
                        confirmBtnText="Confirm"
                        cancelBtnText="Cancel"
                        customStyles={{
                          dateIcon: {
                            position: 'absolute',
                            left: 0,
                            top: 4,
                            marginLeft: 0
                          },
                          dateInput: {
                            marginLeft: 36,
                            borderRadius:5,
                          }
                        }}
        onDateChange={(date) => {this.setState({dueDate: date})}}
      />
      <View style={{flexDirection:'row',paddingLeft:18}} >
       <Image  style={{width: 30, height: 30 }} source={require('./Images/timer.png')} />
        <TouchableOpacity
          onPress={() => this.TimePicker.open()}
          style={{borederWidth:1 , marginLeft:5}}>
       <Text placeholder="select date" style={{borderWidth:2,borderColor:'#B0B0B0',height:35,borderRadius:5,
       width:130,textAlign:'center',justifyContent:'center',fontSize:16}}  >{this.state.dueTime}</Text>       
        </TouchableOpacity>
        <TimePicker
          ref={ref => {
            this.TimePicker = ref;
          }}
          onCancel={() => this.onCancel()}
          onConfirm={(hour, minute) => this.onConfirm(hour, minute)}
        />
        </View>
        <View style={{alignItems:'center',marginTop:30 }} >
            <TouchableOpacity style={{backgroundColor:'#29AEF9'}} onPress={()=>{
              this.props.navigation.navigate('Main');
            console.log("Console Date", new Date(Date.now()), this.state.dueDate , this.state.currentTime ) 
            //  this._saveTask()  
             }} title="Add" style={styles.submitButton}>
            <Text style = {{color:'white' , textAlign:'center',fontSize:20,marginTop:10  }}> Save </Text>
            </TouchableOpacity>
            </View>
    
          </View>
        );
    }
}
const styles = StyleSheet.create({
    container: {
      flex: 1,
      padding: 20,
    },
    submitButton: {
        backgroundColor: '#7EC4E1',
        margin:10,
        width:90,
        height: 50,
        borderRadius:5
     },
  });
